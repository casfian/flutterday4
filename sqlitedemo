//You have to create a sqlite database called "dogdatabase.db" in the project
//if not will give an error file not found
//use Terminal
// >sqlite3 dogdatabase.db
//
//to quit sqlite3 >.quit



// import 'package:flutter/material.dart';
import 'package:flutter/material.dart';
import 'dart:async';
import 'package:flutter/widgets.dart';
import 'package:sqflite/sqflite.dart';
import 'package:path/path.dart';

void main() async {
  runApp(MyApp());

  WidgetsFlutterBinding.ensureInitialized();
  final database = openDatabase(
    join(await getDatabasesPath(), 'dogdatabase.db'),
    onCreate: (db, version) {
      return db.execute(
        "CREATE TABLE dogs(id INTEGER PRIMARY KEY, name TEXT, age INTEGER)",
      );
    },
    version: 1,
  );

  //CRUD Functions

  //create
  Future<void> insertDog(Dog dog) async {
    final Database db = await database;
    await db.insert('dogs', dog.toMap(),
        conflictAlgorithm: ConflictAlgorithm.replace);
  }

  //read
  Future<List<Dog>> listdogs() async {
    final Database db = await database;
    final List<Map<String, dynamic>> maps = await db.query('dogs');

    return List.generate(maps.length, (i) {
      return Dog(
        id: maps[i]['id'],
        name: maps[i]['name'],
        age: maps[i]['age'],
      );
    });
  }

  //Update
  Future<void> updateDog(Dog dog) async {
    final db = await database;
    await db.update(
      'dogs',
      dog.toMap(),
      where: "id = ?",
      whereArgs: [dog.id],
    );
  }

  //delete
  Future<void> deleteDog(int id) async {
    final db = await database;

    await db.delete(
      'dogs',
      where: "id = ?",
      whereArgs: [id],
    );
  }

  //running here
  //data
  var mydog = Dog(
    id: 0,
    name: 'Bernard',
    age: 12,
  );

  //create a record
  await insertDog(mydog);
  print(await listdogs());

  mydog = Dog(
    id: mydog.id,
    name: mydog.name,
    age: 20,
  );

  //update record
  await updateDog(mydog);
  print(await listdogs());

  //delete record
  await deleteDog(mydog.id);
  print(await listdogs());
}
//end main

//Create a class for Dog
class Dog {
  final int id;
  final String name;
  final int age;
  //boleh tambah lagi ciri dog ni

  //constructor
  Dog({this.id, this.name, this.age});

  //Mapping
  Map<String, dynamic> toMap() {
    return {
      'id': id,
      'name': name,
      'age': age,
    };
  }

  @override
  String toString() {
    return 'Dog{id: $id, name: $name, age: $age}';
  }

  
}

class MyApp extends StatelessWidget {
  @override
  Widget build(BuildContext context) {
    return MaterialApp(
      debugShowCheckedModeBanner: false,
      title: 'Flutter SQLite',
      home: Scaffold(
        appBar: AppBar(
          title: Text('Flutter SQLite'),
        ),
        body: Center(
          child: Container(
            child: FlatButton(child: Text('Add Dog'), onPressed: () {}),
          ),
        ),
      ),
    );
  }
}
